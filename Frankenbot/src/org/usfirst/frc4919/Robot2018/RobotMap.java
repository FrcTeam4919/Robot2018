// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4919.Robot2018;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSystemSpeedController1;
    public static SpeedController driveSystemSpeedController2;
    public static SpeedController driveSystemSpeedController3;
    public static SpeedController driveSystemSpeedController4;
    public static MecanumDrive driveSystemMecanumDrive1;
    public static Compressor pneumaticClampCompressor1;
    public static DoubleSolenoid pneumaticClampDoubleSolenoid1;
    public static SpeedController winchSpeedControllerWinch;
    public static SpeedController armMotorSpeedControllerArmMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemSpeedController1 = new VictorSP(1);
        LiveWindow.addActuator("DriveSystem", "Speed Controller 1", (VictorSP) driveSystemSpeedController1);
        driveSystemSpeedController1.setInverted(false);
        driveSystemSpeedController2 = new VictorSP(2);
        LiveWindow.addActuator("DriveSystem", "Speed Controller 2", (VictorSP) driveSystemSpeedController2);
        driveSystemSpeedController2.setInverted(true);
        driveSystemSpeedController3 = new VictorSP(3);
        LiveWindow.addActuator("DriveSystem", "Speed Controller 3", (VictorSP) driveSystemSpeedController3);
        driveSystemSpeedController3.setInverted(true);
        driveSystemSpeedController4 = new VictorSP(4);
        LiveWindow.addActuator("DriveSystem", "Speed Controller 4", (VictorSP) driveSystemSpeedController4);
        driveSystemSpeedController4.setInverted(false);
        driveSystemMecanumDrive1 = new MecanumDrive(driveSystemSpeedController1, driveSystemSpeedController2,
              driveSystemSpeedController3, driveSystemSpeedController4);
        LiveWindow.addActuator("DriveSystem", "Mecanum Drive 1", driveSystemMecanumDrive1);
        driveSystemMecanumDrive1.setSafetyEnabled(true);
        driveSystemMecanumDrive1.setExpiration(0.1);
        driveSystemMecanumDrive1.setMaxOutput(1.0);

        //TODO: Add in when the compressor is connected
//        pneumaticClampCompressor1 = new Compressor(0);
//        LiveWindow.addActuator("PneumaticClamp", "Compressor 1", pneumaticClampCompressor1);
        
        //TODO: Add in when the solendoid is connected
//        pneumaticClampDoubleSolenoid1 = new DoubleSolenoid(0, 2, 3);
//        LiveWindow.addActuator("PneumaticClamp", "Double Solenoid 1", pneumaticClampDoubleSolenoid1);
        
        winchSpeedControllerWinch = new Spark(5);
        LiveWindow.addActuator("Winch", "Speed Controller Winch", (Spark) winchSpeedControllerWinch);
        winchSpeedControllerWinch.setInverted(false);
        armMotorSpeedControllerArmMotor = new Spark(0);
        LiveWindow.addActuator("ArmMotor", "Speed Controller Arm Motor", (Spark) armMotorSpeedControllerArmMotor);
        armMotorSpeedControllerArmMotor.setInverted(true);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
